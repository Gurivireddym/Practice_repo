//Double linked list
//---------------------

#include<stdio.h>
#include<stdlib.h>
void creation();
void insert();
void deletion();
void show();
void insertafter();
//void modify();
//void search();
int main(){
    int option;
     while(1){
    printf("\n1.creation \t 2. insertionbefor \t 3.deletion \t 4. show\t 5.insertafter \t6.exit");
    printf("\nenter a option to do respective operation: ");
    scanf("%d",&option);
   
    switch(option){
        case 1 : creation();
                break;
        case 2 :
                insert();
                break;
        case 3 : deletion();
                break;
        case 4 : show();
                break;
        case 5 :insertafter();
                break;
        case 6 : exit(1);
    }
    }
    
}
typedef struct Node{
    int data;
    struct Node *prev;
    struct Node *next;
}Node;
struct Node *head = NULL;
struct Node *tail = NULL;

void creation(){
    struct Node* crt;
    crt = (Node*)malloc(sizeof(Node));
    scanf("%d",&crt->data);
    crt->prev=NULL;
    crt->next = NULL;
    if(head == NULL){
        head = crt;
        tail = crt;
    }else{
        
        tail->next = crt;
        crt->prev=tail;
        tail = crt;
    }
}

void insert(){
    int before;
    printf("enter a value to insert before: ");
    scanf("%d",&before);
    Node *itr, *ins;
    if(head->data==before){
        ins=(Node*)malloc(sizeof(Node));
        printf("enter a value to insert: ");
        scanf("%d",&ins->data);
        ins->next = head;
        head->prev = ins;
        ins->prev = NULL;
        head = ins;
        return;
    }else{
    itr = head->next;
     
    while(itr != NULL){
        if(itr->data == before){
            ins = (Node*)malloc(sizeof(Node));
            printf("enter a value to insert: ");
            scanf("%d",&ins->data);
            ins->next = itr;
            ins ->prev = itr->prev;
            itr->prev->next = ins;
            itr->prev = ins;
            return;
        }else{
            itr = itr->next;
        }
    }
    }
}
void deletion(){
    int delval;
    printf("enter a value to delete: ");
    scanf("%d",&delval);
    Node *itr, *del;
    if(head->data == delval){
        del = head;
        head = head->next;
        free(del);
        del = NULL;
    }else{
    itr = head->next;
    while(itr != NULL){
        if(itr->data == delval){
            del = itr;
            itr->prev->next = itr->next;
            itr->next->prev = itr->prev;
            free(del);
            del=NULL;
            itr = NULL;
        }else{
            itr = itr->next;
        }
    }
    }
}
void show(){
    struct Node *itr = head;
    if(head == NULL){
        printf("list is empty");
        
    }else{
        while(itr != NULL){
            printf("%d\t",itr->data);
            itr=itr->next;
            
        }
    }
}
void insertafter(){
    int after;
    printf("enter a value to insert after: ");
    scanf("%d",&after);
    Node *itr, *ins;
    if(head->data==after){
        ins=(Node*)malloc(sizeof(Node));
        printf("enter a value to insert: ");
        scanf("%d",&ins->data);
        
        ins->next = head->next;
        head->next = ins;
        head->next->prev =ins; 
        ins->prev =head;
        //ins->prev =head;
        
        //return 0;
    }else{
    itr = head->next;
     
    while(itr != NULL){
        if(itr->data == after){
            ins = (Node*)malloc(sizeof(Node));
            printf("enter a value to insert: ");
            scanf("%d",&ins->data);
            ins->next = itr->next;
            itr->next = ins;
            itr->next->prev =ins; 
            ins->prev =head;
            return;
        }else{
            itr = itr->next;
        }
    }
    }
}